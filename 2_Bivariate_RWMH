#RANDOM WALK METROPOLIS HASTINGS
import numpy as np
import random
import math
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as ss
from scipy.stats import multivariate_normal
from google.colab import files

sigma_bivariada=np.array([[1,-0.85],[-0.85,1]])

def U(q):
  return(np.exp(-1/2*q.dot(np.linalg.inv(sigma_bivariada)).dot(np.transpose(q))[0][0]))    

def RWMH(p_ini, density, mu, sigma, N):
  count=0
  sample=p_ini
  for i in range(1, N):
    proposal=p_ini+np.random.normal(mu, sigma, p_ini.shape[1])
    rate = min(density(proposal)/density(p_ini),1)
    if random.uniform(0, 1) < rate:
      actual=proposal
      p_ini=proposal

    else:
      actual=p_ini
      count=count+1
    sample=np.r_[sample,actual]
  return(sample, count)

np.random.seed(0)
random.seed(0)
sample=RWMH(np.array([[-7,-7]]),U,0,0.15, 30*35)

rejection_rate2= sample[1]/(sample[0].shape[0]-1)
acceptance_rate2 = 1- rejection_rate2
acceptance_rate2

simulations=sample[0]
simulations2= simulations[np.arange(0,len(simulations),35)]
len(simulations2)

x, y = np.mgrid[-8.3:3.8:.2, -8.3:3.8:.2]
pos = np.dstack((x, y))
rv = multivariate_normal([0, 0], [[1, -0.85], [-0.85, 1]])
fig2 = plt.figure()
ax2 = fig2.add_subplot(111)
ax2.contourf(x, y, rv.pdf(pos), 10)
plt.plot(simulations2[:,0],simulations2[:,1], '.', c='red')
plt.plot(simulations2[:,0], simulations2[:,1], "r")
plt.gca().axes.yaxis.set_ticklabels([])
plt.xlabel(r'$q_{1}$')

#plt.savefig("biv_rwmh.png",bbox_inches='tight',dpi=300)
#files.download("biv_rwmh.png")
