import numpy as np
import random
import math
import matplotlib.pyplot as plt
import scipy.stats as ss
from scipy.stats import multivariate_normal
from google.colab import files
import time

def RWMH(p_ini, density, mu, sigma, N):
  counter=0
  sample=p_ini
  for i in range(1, N):
    proposal=p_ini+np.random.normal(mu, sigma, p_ini.shape[1])
    rate = min(density(proposal)/density(p_ini),1)
    if random.uniform(0, 1) < rate:
      actual=proposal
      p_ini=proposal

    else:
      actual=p_ini
      counter=counter+1
    sample=np.r_[sample,actual]
  return(sample, counter)

mean1= [-4, -4]
mean2=[5, 5]
SIGMA1=  [[1, 0.5], [0.5, 1]]
SIGMA2= [[1, -0.3], [-0.3, 1]]
def mixture_bivariate(q):
 return(multivariate_normal(mean1, SIGMA1).pdf(q) * 0.4  +  0.6 * multivariate_normal(mean2, SIGMA2).pdf(q))

q=np.array([[-9,-9]])
np.random.seed(0)
random.seed(0)
t0_RWMH = time.time()
sample=RWMH(q,mixture_bivariate,0,0.2, 5000*30)
t1_RWMH = time.time()
print("--- %s seconds---" % (t1_RWMH- t0_RWMH))

rejection_rate= sample[1]/(sample[0].shape[0]-1)
acceptance_rate = 1- rejection_rate
acceptance_rate
sample_t=sample[0]
q1=sample_t[:,0][np.arange(0,len(sample_t[:,0]),30)]
q2=sample_t[:,1][np.arange(0,len(sample_t[:,0]),30)]

acceptance_rate

len(q1)

x, y = np.mgrid[-10:10:.2, -10:10:.2]
pos = np.dstack((x, y))

fig2 = plt.figure()
ax2 = fig2.add_subplot(111)
ax2.contourf(x, y, mixture_bivariate(pos), 10)
plt.plot(q1, q2, 'o', c='red', alpha=0.3)
plt.xlabel(r'$q_{1}$')
plt.gca().axes.yaxis.set_ticklabels([])
plt.savefig("mixturerw1.png",bbox_inches='tight',dpi=300)
#plt.plot(q1, q2, "r")

"""#Initial Point (2.5,2.5)"""

q_se=np.array([[2.5,2.5]])
np.random.seed(0)
random.seed(0)
t2_RWMH = time.time()
sample_se=RWMH(q_se,mixture_bivariate,0,0.2, 5000*30)
t3_RWMH = time.time()
print("--- %s seconds ---" % (t3_RWMH- t2_RWMH))

rejection_rate2= sample_se[1]/(sample_se[0].shape[0]-1)
acceptance_rate2 = 1- rejection_rate2
acceptance_rate2

sample_set=sample_se[0]
q1_se=sample_set[:,0][np.arange(0,len(sample_set[:,0]),35)]
q2_se=sample_set[:,1][np.arange(0,len(sample_set[:,0]),35)]

x, y = np.mgrid[-10:10:.3, -10:10:.3]
pos = np.dstack((x, y))

fig2 = plt.figure()
ax2 = fig2.add_subplot(111)
ax2.contourf(x, y, mixture_bivariate(pos), 10)
plt.plot(q1_se, q2_se, 'o', c='red', alpha=0.3)
plt.xlabel(r'$q_{1}$')
plt.gca().axes.yaxis.set_ticklabels([])
plt.savefig("mixturerw2.png",bbox_inches='tight',dpi=300)
files.download("mixturerw2.png")
