

import numpy as np
import random
import math
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as ss
from matplotlib import pyplot
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf
from google.colab import files
import scipy.stats
import time

!pip install '/content/pytwalk-1.6.0 (4).tar.gz'

import pytwalk as pt

#Density
def fU(y):
  if y[0]>0:
    return(-4*np.log(y[0])+np.log(24)+y[0])
  else:
    return(np.inf)

def verosimilitud(sample):
  return(np.log(1/24)+4*np.log(sample)-sample)

A=pt.pytwalk( n=1, U=fU)
np.random.seed(0)
random.seed(0)
t0 = time.time()
A.Run( T=100000, x0=500*np.ones(1), xp0=501*np.ones(1))
t1 = time.time()
print("--- %s seconds ---" % (t1- t0))

A.Ana()

AA=A.Output
samples = AA[:, :-1]

def log_densidades_gamma_r(sample):    #log density
  return(np.log(1/24)+4*np.log(sample)-sample)

vector_verosim2 = np.zeros(2000)
for i in range(0,2000):
  vector_verosim2[i]=log_densidades_gamma_r(samples[i])


burnin=250
plt.grid(linestyle='dashed')
plt.plot(vector_verosim2)
plt.xlabel('$X_{t}$')
plt.axvline(burnin,-100,100,  color="red",  linestyle='dashed')
plt.gca().axes.yaxis.set_ticklabels([])

#plt.savefig("burntwa.png",bbox_inches='tight',dpi=300)
#files.download("burntwa.png")

# Commented out IPython magic to ensure Python compatibility.
# %load_ext rpy2.ipython

# Commented out IPython magic to ensure Python compatibility.
# 
# %%R
# install.packages("LaplacesDemon")
# library("LaplacesDemon")
#

# Commented out IPython magic to ensure Python compatibility.

# %R -i samples

cadena_sb=samples[250:99999]
fig=plot_acf(cadena_sb, lags=50,alpha=0.05)
plt.grid(linestyle='dashed')
plt.title("")
plt.xlabel('Lag')
plt.ylim(-0.2, 1)
plt.gca().axes.yaxis.set_ticklabels([])
pyplot.show()
#fig.savefig("autocor_3.png",bbox_inches='tight',dpi=300)
#files.download("autocor_3.png")

from matplotlib.collections import PolyCollection, LineCollection
curr_fig, curr_ax = plt.subplots(figsize=(10, 8))
plot_acf(cadena_sb, lags=70,alpha=0.05, ax=curr_ax)

for item in curr_ax.collections:
    if isinstance(item, PolyCollection):
        item.set_facecolor("dodgerblue")
    if isinstance(item, LineCollection):
        item.set_color("black")

for item in curr_ax.lines:
    item.set_color("dodgerblue")

plt.grid(linestyle='dashed')
plt.title("")
plt.xlabel('Lag')
plt.ylim(-0.2, 1.05)

plt.gca().axes.yaxis.set_ticklabels([])


plt.show()


curr_fig.savefig("autocor_3.png", bbox_inches='tight', dpi=300)
import os
files.download("autocor_3.png")

# Commented out IPython magic to ensure Python compatibility.
# %R -i cadena_sb
# %R iat1=IAT(cadena_sb)
# %R  iat1

lag = %R iat1
lag= math.ceil(lag)
lag

cadena_sl= cadena_sb[np.arange(0,len(cadena_sb),lag)]
len(cadena_sl)
